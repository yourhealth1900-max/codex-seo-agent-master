name: Dual Exports (Universal)
on:
  push:
    paths:
      - 'codex/runs/**'
  workflow_dispatch:
    inputs:
      run_dir:
        description: 'Optional run dir (codex/runs/2025-10-17-sample-slug)'
        required: false
        default: ''
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Resolve RUN_DIR
        id: r
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.run_dir }}" ]; then
            RUN_DIR="${{ github.event.inputs.run_dir }}"
          else
            RUN_DIR=$(ls -td codex/runs/* 2>/dev/null | head -n1 || true)
          fi
          echo "RUN_DIR=$RUN_DIR"
          if [ -z "$RUN_DIR" ] || [ ! -d "$RUN_DIR" ]; then
            echo "RUN_DIR=__NONE__" >> $GITHUB_OUTPUT
            echo "::warning::No codex/runs/* found."
          fi
          echo "run_dir=$RUN_DIR" >> $GITHUB_OUTPUT
      - name: Ensure exports & TXT copy
        if: steps.r.outputs.run_dir != '__NONE__'
        shell: bash
        run: |
          run="${{ steps.r.outputs.run_dir }}"
          mkdir -p "$run/exports"
          if [ -f "$run/article.html" ]; then
            cp "$run/article.html" "$run/exports/article_full_html.txt"
          fi
      - name: Build JSON metadata (tolerant)
        if: steps.r.outputs.run_dir != '__NONE__'
        shell: bash
        run: |
          run="${{ steps.r.outputs.run_dir }}"
          meta_json="$run/metadata.json"
          html="$run/article.html"
          json="$run/exports/metadata_bundle.json"
          # Safe getters
          get() { jq -r "$1 // empty" "$meta_json" 2>/dev/null || echo ""; }
          title="$(get .title)"
          meta="$(get .meta_description)"
          slug="$(get .slug)"
          canon="$(get .canonical_url)"
          fkw="$(get .focus_kw)"
          skw="$(jq -r '.secondary_kws | join(", ")' "$meta_json" 2>/dev/null || echo "")"
          # Fallback title/meta from HTML if missing
          if [ -z "$title" ] && [ -f "$html" ]; then
            title=$(grep -oP '(?<=<title>).*?(?=</title>)' "$html" | head -n1)
          fi
          # Word count from HTML
          wc=0
          if [ -f "$html" ]; then
            wc=$(tr '\n' ' ' < "$html" | sed 's/<[^>]*>/ /g' | tr -s ' ' | wc -w | awk '{print $1}')
          fi
          # Media (optional file)
          mm="$run/assets/media_meta.json"
          getm(){ jq -r "$1 // empty" "$mm" 2>/dev/null || echo ""; }
          fi_title="$(getm .feature_image.title)"
          fi_alt="$(getm .feature_image.alt)"
          fi_url="$(getm .feature_image.url)"
          fi_w="$(getm .feature_image.width)"
          fi_h="$(getm .feature_image.height)"
          ig_title="$(getm .infographic.title)"
          ig_alt="$(getm .infographic.alt)"
          ig_url="$(getm .infographic.url)"
          ig_w="$(getm .infographic.width)"
          ig_h="$(getm .infographic.height)"
          # Create JSON output
          jq -n \
            --arg title "$title" \
            --arg meta "$meta" \
            --arg slug "$slug" \
            --arg canon "$canon" \
            --arg fkw "$fkw" \
            --arg skw "$skw" \
            --argjson wc "$wc" \
            --arg fi_title "$fi_title" \
            --arg fi_alt "$fi_alt" \
            --arg fi_url "$fi_url" \
            --arg fi_w "$fi_w" \
            --arg fi_h "$fi_h" \
            --arg ig_title "$ig_title" \
            --arg ig_alt "$ig_alt" \
            --arg ig_url "$ig_url" \
            --arg ig_w "$ig_w" \
            --arg ig_h "$ig_h" \
            '{
              seo_title: $title,
              meta_description: $meta,
              slug: $slug,
              canonical: $canon,
              focus_keyword: $fkw,
              secondary_keywords: $skw,
              word_count: $wc,
              internal_links_count: "(analyze in WP after paste)",
              feature_image: {
                title: $fi_title,
                alt: $fi_alt,
                url: $fi_url,
                dimensions: ($fi_w + "x" + $fi_h)
              },
              infographic: {
                title: $ig_title,
                alt: $ig_alt,
                url: $ig_url,
                dimensions: ($ig_w + "x" + $ig_h)
              },
              notes: ""
            }' > "$json"
      - name: Zip bundle + upload artifact
        if: steps.r.outputs.run_dir != '__NONE__'
        shell: bash
        run: |
          run="${{ steps.r.outputs.run_dir }}"
          zip -j "$run/exports/publish_bundle.zip" \
            "$run/article.html" \
            "$run/exports/article_full_html.txt" \
            "$run/exports/metadata_bundle.json"
      - name: Upload artifact
        if: steps.r.outputs.run_dir != '__NONE__'
        uses: actions/upload-artifact@v4
        with:
          name: publish_bundle
          path: ${{ steps.r.outputs.run_dir }}/exports/publish_bundle.zip
